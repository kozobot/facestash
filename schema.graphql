schema {
    query: Query
    mutation: Mutation
}

type Performer {
    stash_id: ID!
    face_id: ID
    created_at: String!
    updated_at: String!
}

type Face {
    id: ID!
    encoding: String!
    created_at: String!
    updated_at: String!
}

type Scene {
    oshash: String!
    faces: [Face]
    created_at: String!
    updated_at: String!
}

type PerformerResult {
    success: Boolean!
    errors: [String]
    performer: Performer
}

type PerformersResult {
    success: Boolean!
    errors: [String]
    performer: [Performer]
}

type SceneResult {
    success: Boolean!
    errors: [String]
    scene: Scene
}

type Query {
    listPerformers: PerformersResult!
    getPerformer(stash_id: ID!): PerformerResult!
    getPerformersForScene(oshash: String!): PerformersResult!
}

type Mutation {
    createPerformer(stash_id: String!): PerformerResult!
    updatePerformer(stash_id: String!, image_path: String!, updated_at: String!): PerformerResult!
    createScene(oshash: String!): SceneResult!
    updateScene(oshash: String!, stream: String!, updated_at: String!): SceneResult!
}